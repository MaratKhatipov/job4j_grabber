Доступные сборщики мусора
По курсу мы рассматриваем только сборщики мусора входящих в состав JDK (а именно HotSpot GC), сборщики других компаний типа IMB, JRockit и т.д.

рассматриваются.

1. Serial GC.

Это самый простой вид сборщика. Он является Serial, Stop The World, Copying, т.е. выполняет сборку мусора в одном потоке,

вызывается событие Stop The World и используется Copying сборку мусора. Подходит для простых клиентских приложений, к примеру проигрывателя

музыки.

Плюс: минимальные требования к среде. Минус: медленный.

2. Parallel GC

Это усовершенствованная версия сборщика GC. Он является Parallel, Stop The World, Copying, т.е. его единственное отличие в том,

что он выполняет сборку мусора в нескольких потоках. Подходит для более сложных клиентских приложений, где нет серьезных требований к скорости

сборки, но ее наличие было бы неплохим преимуществом. К примеру, несложное приложение для работы с графикой.

Плюс: пошустрее чем Serial GC. Минус: недостаточно быстрый, по сравнению с Serial требует наличие нескольких ядер.

3. CMS (Concurrent Mark Sweep)

Это улучшенная версия Parallel GC. Он является Parallel, Concurrent, Copying. Лучше прошлого он тем, что используется параллелизм, т.е.

часть heap чиститься наряду с работой приложения. Подходит для клиентских приложений, где длительные паузы не допустимы, например, настольное

приложения для торговли на бирже.

Убран с JDK 14.

Плюс: небольшие паузу на сборку мусора. Минус: более высокие системные требования.

4. G1

Мощный сборщик сборщик мусора, усовершенствованная версия CMS. Он является Parallel, Concurrent, Copying. Его особенностью является высокая

пропускная способность. Следовательно сборка мусора выполняется редко. Данный сборщик мусора используется для серверных приложений требующих быстрого отклика и не терпящих долгих пауз на сборку мусора.

Плюс: скорость. Минус: нужен большой heap (> 4gb)

5. ZGC

Данный сборщик появился недавно. Он является Parallel, Concurrent, Copying. Причем он использует параллелизм на полную мощь. Тем самым для

очистки вовсе не требует остановки приложения, в отличие от G1, где паузы хоть и маленькие но присутствуют. Используется для приложений где

допустимы лишь паузы < 10ms

Плюс: нет паузы. Минус: требует сверх большой heap в несколько терабайтов для эффективной работы

Доступен только с JDK 11.


Запуск приложения с различными сборщиками мусора

Для начала стоит отметить флаг -Xlog:gc* (до JDK 9 нужно использовать -XX:-PrintGCDetails) если мы его зададим то, сможем увидеть лог сборщика в консоли

Ключи для запуска:

- Serial => -XX:+UseSerialGC

- Parallel => -XX:+UseParallelGC

- CMS => -XX:+UseConcMarkSweepGC (доступен до JDK 14)

- G1 => -XX:+UseG1GC

- ZGC => -XX:+UseZGC